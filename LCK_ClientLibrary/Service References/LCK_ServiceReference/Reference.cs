//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LCK_ClientLibrary.LCK_ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flavor", Namespace="http://schemas.datacontract.org/2004/07/LCK_DBcommunication.LCK_DataObjects")]
    [System.SerializableAttribute()]
    public partial class Flavor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CakeFlavorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NotAFlavorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CakeFlavor {
            get {
                return this.CakeFlavorField;
            }
            set {
                if ((this.CakeFlavorField.Equals(value) != true)) {
                    this.CakeFlavorField = value;
                    this.RaisePropertyChanged("CakeFlavor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NotAFlavor {
            get {
                return this.NotAFlavorField;
            }
            set {
                if ((this.NotAFlavorField.Equals(value) != true)) {
                    this.NotAFlavorField = value;
                    this.RaisePropertyChanged("NotAFlavor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Cake", Namespace="http://schemas.datacontract.org/2004/07/LCK_DBcommunication.LCK_DataObjects")]
    [System.SerializableAttribute()]
    public partial class Cake : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbvNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AbvName {
            get {
                return this.AbvNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AbvNameField, value) != true)) {
                    this.AbvNameField = value;
                    this.RaisePropertyChanged("AbvName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Batch", Namespace="http://schemas.datacontract.org/2004/07/LCK_DBcommunication.LCK_DataObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(LCK_ClientLibrary.LCK_ServiceReference.SO_Batch))]
    public partial class Batch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Day_NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.Flavor FlavorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityMiniField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequestedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.StoreInfo StoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Day_Number {
            get {
                return this.Day_NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.Day_NumberField, value) != true)) {
                    this.Day_NumberField = value;
                    this.RaisePropertyChanged("Day_Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.Flavor Flavor {
            get {
                return this.FlavorField;
            }
            set {
                if ((object.ReferenceEquals(this.FlavorField, value) != true)) {
                    this.FlavorField = value;
                    this.RaisePropertyChanged("Flavor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuantityMini {
            get {
                return this.QuantityMiniField;
            }
            set {
                if ((this.QuantityMiniField.Equals(value) != true)) {
                    this.QuantityMiniField = value;
                    this.RaisePropertyChanged("QuantityMini");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Requested {
            get {
                return this.RequestedField;
            }
            set {
                if ((this.RequestedField.Equals(value) != true)) {
                    this.RequestedField = value;
                    this.RaisePropertyChanged("Requested");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.StoreInfo Store {
            get {
                return this.StoreField;
            }
            set {
                if ((object.ReferenceEquals(this.StoreField, value) != true)) {
                    this.StoreField = value;
                    this.RaisePropertyChanged("Store");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StoreInfo", Namespace="http://schemas.datacontract.org/2004/07/LCK_DBcommunication.LCK_DataObjects")]
    [System.SerializableAttribute()]
    public partial class StoreInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SO_Batch", Namespace="http://schemas.datacontract.org/2004/07/LCK_DBcommunication.LCK_DataObjects")]
    [System.SerializableAttribute()]
    public partial class SO_Batch : LCK_ClientLibrary.LCK_ServiceReference.Batch {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Is_MiniField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SO_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Special_InstructionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Is_Mini {
            get {
                return this.Is_MiniField;
            }
            set {
                if ((this.Is_MiniField.Equals(value) != true)) {
                    this.Is_MiniField = value;
                    this.RaisePropertyChanged("Is_Mini");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SO_ID {
            get {
                return this.SO_IDField;
            }
            set {
                if ((this.SO_IDField.Equals(value) != true)) {
                    this.SO_IDField = value;
                    this.RaisePropertyChanged("SO_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Special_Instructions {
            get {
                return this.Special_InstructionsField;
            }
            set {
                if ((object.ReferenceEquals(this.Special_InstructionsField, value) != true)) {
                    this.Special_InstructionsField = value;
                    this.RaisePropertyChanged("Special_Instructions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpecialOrder", Namespace="http://schemas.datacontract.org/2004/07/LCK_DBcommunication.LCK_DataObjects")]
    [System.SerializableAttribute()]
    public partial class SpecialOrder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.SO_Batch[] BatchesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.Cake_Batch[] CakesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Customer_AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Customer_EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Customer_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Customer_PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CuttingCakeNotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Day_NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeliverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DueTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScanLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SetupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SpecialInstructionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.StoreInfo StoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.SO_Batch[] Batches {
            get {
                return this.BatchesField;
            }
            set {
                if ((object.ReferenceEquals(this.BatchesField, value) != true)) {
                    this.BatchesField = value;
                    this.RaisePropertyChanged("Batches");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.Cake_Batch[] Cakes {
            get {
                return this.CakesField;
            }
            set {
                if ((object.ReferenceEquals(this.CakesField, value) != true)) {
                    this.CakesField = value;
                    this.RaisePropertyChanged("Cakes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer_Address {
            get {
                return this.Customer_AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.Customer_AddressField, value) != true)) {
                    this.Customer_AddressField = value;
                    this.RaisePropertyChanged("Customer_Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer_Email {
            get {
                return this.Customer_EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.Customer_EmailField, value) != true)) {
                    this.Customer_EmailField = value;
                    this.RaisePropertyChanged("Customer_Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer_Name {
            get {
                return this.Customer_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Customer_NameField, value) != true)) {
                    this.Customer_NameField = value;
                    this.RaisePropertyChanged("Customer_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Customer_Phone {
            get {
                return this.Customer_PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.Customer_PhoneField, value) != true)) {
                    this.Customer_PhoneField = value;
                    this.RaisePropertyChanged("Customer_Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CuttingCakeNotes {
            get {
                return this.CuttingCakeNotesField;
            }
            set {
                if ((object.ReferenceEquals(this.CuttingCakeNotesField, value) != true)) {
                    this.CuttingCakeNotesField = value;
                    this.RaisePropertyChanged("CuttingCakeNotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Day_Number {
            get {
                return this.Day_NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.Day_NumberField, value) != true)) {
                    this.Day_NumberField = value;
                    this.RaisePropertyChanged("Day_Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deliver {
            get {
                return this.DeliverField;
            }
            set {
                if ((this.DeliverField.Equals(value) != true)) {
                    this.DeliverField = value;
                    this.RaisePropertyChanged("Deliver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayNotes {
            get {
                return this.DisplayNotesField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNotesField, value) != true)) {
                    this.DisplayNotesField = value;
                    this.RaisePropertyChanged("DisplayNotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DueTime {
            get {
                return this.DueTimeField;
            }
            set {
                if ((this.DueTimeField.Equals(value) != true)) {
                    this.DueTimeField = value;
                    this.RaisePropertyChanged("DueTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModified {
            get {
                return this.LastModifiedField;
            }
            set {
                if ((this.LastModifiedField.Equals(value) != true)) {
                    this.LastModifiedField = value;
                    this.RaisePropertyChanged("LastModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScanLink {
            get {
                return this.ScanLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.ScanLinkField, value) != true)) {
                    this.ScanLinkField = value;
                    this.RaisePropertyChanged("ScanLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Setup {
            get {
                return this.SetupField;
            }
            set {
                if ((this.SetupField.Equals(value) != true)) {
                    this.SetupField = value;
                    this.RaisePropertyChanged("Setup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialInstructions {
            get {
                return this.SpecialInstructionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialInstructionsField, value) != true)) {
                    this.SpecialInstructionsField = value;
                    this.RaisePropertyChanged("SpecialInstructions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.StoreInfo Store {
            get {
                return this.StoreField;
            }
            set {
                if ((object.ReferenceEquals(this.StoreField, value) != true)) {
                    this.StoreField = value;
                    this.RaisePropertyChanged("Store");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Cake_Batch", Namespace="http://schemas.datacontract.org/2004/07/LCK_DBcommunication.LCK_DataObjects")]
    [System.SerializableAttribute()]
    public partial class Cake_Batch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.Cake CakeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.Flavor FlavorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SO_IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.Cake Cake {
            get {
                return this.CakeField;
            }
            set {
                if ((object.ReferenceEquals(this.CakeField, value) != true)) {
                    this.CakeField = value;
                    this.RaisePropertyChanged("Cake");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.Flavor Flavor {
            get {
                return this.FlavorField;
            }
            set {
                if ((object.ReferenceEquals(this.FlavorField, value) != true)) {
                    this.FlavorField = value;
                    this.RaisePropertyChanged("Flavor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SO_ID {
            get {
                return this.SO_IDField;
            }
            set {
                if ((this.SO_IDField.Equals(value) != true)) {
                    this.SO_IDField = value;
                    this.RaisePropertyChanged("SO_ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DayInfo", Namespace="http://schemas.datacontract.org/2004/07/LCK_DBcommunication.LCK_DataObjects")]
    [System.SerializableAttribute()]
    public partial class DayInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.Batch[] DailyBatchesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DayNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder[] OrdersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.Batch[] DailyBatches {
            get {
                return this.DailyBatchesField;
            }
            set {
                if ((object.ReferenceEquals(this.DailyBatchesField, value) != true)) {
                    this.DailyBatchesField = value;
                    this.RaisePropertyChanged("DailyBatches");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DayNumber {
            get {
                return this.DayNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DayNumberField, value) != true)) {
                    this.DayNumberField = value;
                    this.RaisePropertyChanged("DayNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder[] Orders {
            get {
                return this.OrdersField;
            }
            set {
                if ((object.ReferenceEquals(this.OrdersField, value) != true)) {
                    this.OrdersField = value;
                    this.RaisePropertyChanged("Orders");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NewOrder", Namespace="http://schemas.datacontract.org/2004/07/LCK_DBcommunication.LCK_DataObjects")]
    [System.SerializableAttribute()]
    public partial class NewOrder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EdittedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FulFilledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder SOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LCK_ClientLibrary.LCK_ServiceReference.StoreInfo Store_OriginField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Editted {
            get {
                return this.EdittedField;
            }
            set {
                if ((this.EdittedField.Equals(value) != true)) {
                    this.EdittedField = value;
                    this.RaisePropertyChanged("Editted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FulFilled {
            get {
                return this.FulFilledField;
            }
            set {
                if ((this.FulFilledField.Equals(value) != true)) {
                    this.FulFilledField = value;
                    this.RaisePropertyChanged("FulFilled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder SO {
            get {
                return this.SOField;
            }
            set {
                if ((object.ReferenceEquals(this.SOField, value) != true)) {
                    this.SOField = value;
                    this.RaisePropertyChanged("SO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LCK_ClientLibrary.LCK_ServiceReference.StoreInfo Store_Origin {
            get {
                return this.Store_OriginField;
            }
            set {
                if ((object.ReferenceEquals(this.Store_OriginField, value) != true)) {
                    this.Store_OriginField = value;
                    this.RaisePropertyChanged("Store_Origin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LCK_ServiceReference.ILCK_Service")]
    public interface ILCK_Service {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetAllFlavors", ReplyAction="http://tempuri.org/ILCK_Service/GetAllFlavorsResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.Flavor[] GetAllFlavors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetAllFlavors", ReplyAction="http://tempuri.org/ILCK_Service/GetAllFlavorsResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.Flavor[]> GetAllFlavorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetAllCakes", ReplyAction="http://tempuri.org/ILCK_Service/GetAllCakesResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.Cake[] GetAllCakes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetAllCakes", ReplyAction="http://tempuri.org/ILCK_Service/GetAllCakesResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.Cake[]> GetAllCakesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetBatch", ReplyAction="http://tempuri.org/ILCK_Service/GetBatchResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.Batch GetBatch(int BatchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetBatch", ReplyAction="http://tempuri.org/ILCK_Service/GetBatchResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.Batch> GetBatchAsync(int BatchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetBatches", ReplyAction="http://tempuri.org/ILCK_Service/GetBatchesResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.Batch[] GetBatches(int StoreID, string DayNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetBatches", ReplyAction="http://tempuri.org/ILCK_Service/GetBatchesResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.Batch[]> GetBatchesAsync(int StoreID, string DayNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetDailyFlavors", ReplyAction="http://tempuri.org/ILCK_Service/GetDailyFlavorsResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.Batch[] GetDailyFlavors(int StoreID, string DayNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetDailyFlavors", ReplyAction="http://tempuri.org/ILCK_Service/GetDailyFlavorsResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.Batch[]> GetDailyFlavorsAsync(int StoreID, string DayNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetStoreInfoByID", ReplyAction="http://tempuri.org/ILCK_Service/GetStoreInfoByIDResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.StoreInfo GetStoreInfoByID(int StoreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetStoreInfoByID", ReplyAction="http://tempuri.org/ILCK_Service/GetStoreInfoByIDResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.StoreInfo> GetStoreInfoByIDAsync(int StoreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetStoreInfo", ReplyAction="http://tempuri.org/ILCK_Service/GetStoreInfoResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.StoreInfo GetStoreInfo(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetStoreInfo", ReplyAction="http://tempuri.org/ILCK_Service/GetStoreInfoResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.StoreInfo> GetStoreInfoAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetSpecialOrder", ReplyAction="http://tempuri.org/ILCK_Service/GetSpecialOrderResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder GetSpecialOrder(int SO_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetSpecialOrder", ReplyAction="http://tempuri.org/ILCK_Service/GetSpecialOrderResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder> GetSpecialOrderAsync(int SO_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetLastSpecialOrderID", ReplyAction="http://tempuri.org/ILCK_Service/GetLastSpecialOrderIDResponse")]
        int GetLastSpecialOrderID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetLastSpecialOrderID", ReplyAction="http://tempuri.org/ILCK_Service/GetLastSpecialOrderIDResponse")]
        System.Threading.Tasks.Task<int> GetLastSpecialOrderIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetSpecialOrders", ReplyAction="http://tempuri.org/ILCK_Service/GetSpecialOrdersResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder[] GetSpecialOrders(int StoreID, string DayNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetSpecialOrders", ReplyAction="http://tempuri.org/ILCK_Service/GetSpecialOrdersResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder[]> GetSpecialOrdersAsync(int StoreID, string DayNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetDayInfo", ReplyAction="http://tempuri.org/ILCK_Service/GetDayInfoResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.DayInfo GetDayInfo(int StoreID, string DayNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetDayInfo", ReplyAction="http://tempuri.org/ILCK_Service/GetDayInfoResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.DayInfo> GetDayInfoAsync(int StoreID, string DayNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetDayInfoAll", ReplyAction="http://tempuri.org/ILCK_Service/GetDayInfoAllResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.DayInfo GetDayInfoAll(string DayNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetDayInfoAll", ReplyAction="http://tempuri.org/ILCK_Service/GetDayInfoAllResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.DayInfo> GetDayInfoAllAsync(string DayNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetAllStoresInfo", ReplyAction="http://tempuri.org/ILCK_Service/GetAllStoresInfoResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.StoreInfo[] GetAllStoresInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetAllStoresInfo", ReplyAction="http://tempuri.org/ILCK_Service/GetAllStoresInfoResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.StoreInfo[]> GetAllStoresInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetNewOrders", ReplyAction="http://tempuri.org/ILCK_Service/GetNewOrdersResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.NewOrder[] GetNewOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/GetNewOrders", ReplyAction="http://tempuri.org/ILCK_Service/GetNewOrdersResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.NewOrder[]> GetNewOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddBatch", ReplyAction="http://tempuri.org/ILCK_Service/AddBatchResponse")]
        bool AddBatch(LCK_ClientLibrary.LCK_ServiceReference.Batch bat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddBatch", ReplyAction="http://tempuri.org/ILCK_Service/AddBatchResponse")]
        System.Threading.Tasks.Task<bool> AddBatchAsync(LCK_ClientLibrary.LCK_ServiceReference.Batch bat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddFlavor", ReplyAction="http://tempuri.org/ILCK_Service/AddFlavorResponse")]
        bool AddFlavor(LCK_ClientLibrary.LCK_ServiceReference.Flavor flav);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddFlavor", ReplyAction="http://tempuri.org/ILCK_Service/AddFlavorResponse")]
        System.Threading.Tasks.Task<bool> AddFlavorAsync(LCK_ClientLibrary.LCK_ServiceReference.Flavor flav);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddCake", ReplyAction="http://tempuri.org/ILCK_Service/AddCakeResponse")]
        bool AddCake(LCK_ClientLibrary.LCK_ServiceReference.Cake cke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddCake", ReplyAction="http://tempuri.org/ILCK_Service/AddCakeResponse")]
        System.Threading.Tasks.Task<bool> AddCakeAsync(LCK_ClientLibrary.LCK_ServiceReference.Cake cke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddSpecialOrder", ReplyAction="http://tempuri.org/ILCK_Service/AddSpecialOrderResponse")]
        bool AddSpecialOrder(LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder SO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddSpecialOrder", ReplyAction="http://tempuri.org/ILCK_Service/AddSpecialOrderResponse")]
        System.Threading.Tasks.Task<bool> AddSpecialOrderAsync(LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder SO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddSpecialOrderBatch", ReplyAction="http://tempuri.org/ILCK_Service/AddSpecialOrderBatchResponse")]
        bool AddSpecialOrderBatch(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SO_Batch batch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddSpecialOrderBatch", ReplyAction="http://tempuri.org/ILCK_Service/AddSpecialOrderBatchResponse")]
        System.Threading.Tasks.Task<bool> AddSpecialOrderBatchAsync(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SO_Batch batch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddSpecialOrderCakeBatch", ReplyAction="http://tempuri.org/ILCK_Service/AddSpecialOrderCakeBatchResponse")]
        bool AddSpecialOrderCakeBatch(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.Cake_Batch cakeBatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddSpecialOrderCakeBatch", ReplyAction="http://tempuri.org/ILCK_Service/AddSpecialOrderCakeBatchResponse")]
        System.Threading.Tasks.Task<bool> AddSpecialOrderCakeBatchAsync(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.Cake_Batch cakeBatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddStore", ReplyAction="http://tempuri.org/ILCK_Service/AddStoreResponse")]
        bool AddStore(LCK_ClientLibrary.LCK_ServiceReference.StoreInfo Store);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddStore", ReplyAction="http://tempuri.org/ILCK_Service/AddStoreResponse")]
        System.Threading.Tasks.Task<bool> AddStoreAsync(LCK_ClientLibrary.LCK_ServiceReference.StoreInfo Store);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddNewOrder", ReplyAction="http://tempuri.org/ILCK_Service/AddNewOrderResponse")]
        bool AddNewOrder(LCK_ClientLibrary.LCK_ServiceReference.NewOrder newOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/AddNewOrder", ReplyAction="http://tempuri.org/ILCK_Service/AddNewOrderResponse")]
        System.Threading.Tasks.Task<bool> AddNewOrderAsync(LCK_ClientLibrary.LCK_ServiceReference.NewOrder newOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateSpecialOrder", ReplyAction="http://tempuri.org/ILCK_Service/UpdateSpecialOrderResponse")]
        bool UpdateSpecialOrder(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder updatedSO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateSpecialOrder", ReplyAction="http://tempuri.org/ILCK_Service/UpdateSpecialOrderResponse")]
        System.Threading.Tasks.Task<bool> UpdateSpecialOrderAsync(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder updatedSO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateSpecialOrderBatch", ReplyAction="http://tempuri.org/ILCK_Service/UpdateSpecialOrderBatchResponse")]
        bool UpdateSpecialOrderBatch(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SO_Batch updatedBatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateSpecialOrderBatch", ReplyAction="http://tempuri.org/ILCK_Service/UpdateSpecialOrderBatchResponse")]
        System.Threading.Tasks.Task<bool> UpdateSpecialOrderBatchAsync(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SO_Batch updatedBatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateBatch", ReplyAction="http://tempuri.org/ILCK_Service/UpdateBatchResponse")]
        bool UpdateBatch(int Batch_ID, LCK_ClientLibrary.LCK_ServiceReference.Batch updatedBatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateBatch", ReplyAction="http://tempuri.org/ILCK_Service/UpdateBatchResponse")]
        System.Threading.Tasks.Task<bool> UpdateBatchAsync(int Batch_ID, LCK_ClientLibrary.LCK_ServiceReference.Batch updatedBatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateFlavor", ReplyAction="http://tempuri.org/ILCK_Service/UpdateFlavorResponse")]
        bool UpdateFlavor(int Flavor_ID, LCK_ClientLibrary.LCK_ServiceReference.Flavor updatedFlavor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateFlavor", ReplyAction="http://tempuri.org/ILCK_Service/UpdateFlavorResponse")]
        System.Threading.Tasks.Task<bool> UpdateFlavorAsync(int Flavor_ID, LCK_ClientLibrary.LCK_ServiceReference.Flavor updatedFlavor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateCake", ReplyAction="http://tempuri.org/ILCK_Service/UpdateCakeResponse")]
        bool UpdateCake(int Cake_ID, [System.ServiceModel.MessageParameterAttribute(Name="updateCake")] LCK_ClientLibrary.LCK_ServiceReference.Cake updateCake1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateCake", ReplyAction="http://tempuri.org/ILCK_Service/UpdateCakeResponse")]
        System.Threading.Tasks.Task<bool> UpdateCakeAsync(int Cake_ID, LCK_ClientLibrary.LCK_ServiceReference.Cake updateCake);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateStore", ReplyAction="http://tempuri.org/ILCK_Service/UpdateStoreResponse")]
        bool UpdateStore(int Store_ID, LCK_ClientLibrary.LCK_ServiceReference.StoreInfo updatedStore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateStore", ReplyAction="http://tempuri.org/ILCK_Service/UpdateStoreResponse")]
        System.Threading.Tasks.Task<bool> UpdateStoreAsync(int Store_ID, LCK_ClientLibrary.LCK_ServiceReference.StoreInfo updatedStore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateNewOrder", ReplyAction="http://tempuri.org/ILCK_Service/UpdateNewOrderResponse")]
        bool UpdateNewOrder(int NewOrder_ID, LCK_ClientLibrary.LCK_ServiceReference.NewOrder updatedNewOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UpdateNewOrder", ReplyAction="http://tempuri.org/ILCK_Service/UpdateNewOrderResponse")]
        System.Threading.Tasks.Task<bool> UpdateNewOrderAsync(int NewOrder_ID, LCK_ClientLibrary.LCK_ServiceReference.NewOrder updatedNewOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteSpecialOrder", ReplyAction="http://tempuri.org/ILCK_Service/DeleteSpecialOrderResponse")]
        bool DeleteSpecialOrder(int SO_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteSpecialOrder", ReplyAction="http://tempuri.org/ILCK_Service/DeleteSpecialOrderResponse")]
        System.Threading.Tasks.Task<bool> DeleteSpecialOrderAsync(int SO_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteAllSpecialOrders", ReplyAction="http://tempuri.org/ILCK_Service/DeleteAllSpecialOrdersResponse")]
        bool DeleteAllSpecialOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteAllSpecialOrders", ReplyAction="http://tempuri.org/ILCK_Service/DeleteAllSpecialOrdersResponse")]
        System.Threading.Tasks.Task<bool> DeleteAllSpecialOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteSpecialOrderBatch", ReplyAction="http://tempuri.org/ILCK_Service/DeleteSpecialOrderBatchResponse")]
        bool DeleteSpecialOrderBatch(int Batch_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteSpecialOrderBatch", ReplyAction="http://tempuri.org/ILCK_Service/DeleteSpecialOrderBatchResponse")]
        System.Threading.Tasks.Task<bool> DeleteSpecialOrderBatchAsync(int Batch_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteBatch", ReplyAction="http://tempuri.org/ILCK_Service/DeleteBatchResponse")]
        bool DeleteBatch(int Batch_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteBatch", ReplyAction="http://tempuri.org/ILCK_Service/DeleteBatchResponse")]
        System.Threading.Tasks.Task<bool> DeleteBatchAsync(int Batch_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteAllBatches", ReplyAction="http://tempuri.org/ILCK_Service/DeleteAllBatchesResponse")]
        bool DeleteAllBatches();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteAllBatches", ReplyAction="http://tempuri.org/ILCK_Service/DeleteAllBatchesResponse")]
        System.Threading.Tasks.Task<bool> DeleteAllBatchesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteFlavor", ReplyAction="http://tempuri.org/ILCK_Service/DeleteFlavorResponse")]
        bool DeleteFlavor(int Flavor_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteFlavor", ReplyAction="http://tempuri.org/ILCK_Service/DeleteFlavorResponse")]
        System.Threading.Tasks.Task<bool> DeleteFlavorAsync(int Flavor_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteAllFlavors", ReplyAction="http://tempuri.org/ILCK_Service/DeleteAllFlavorsResponse")]
        bool DeleteAllFlavors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteAllFlavors", ReplyAction="http://tempuri.org/ILCK_Service/DeleteAllFlavorsResponse")]
        System.Threading.Tasks.Task<bool> DeleteAllFlavorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteCake", ReplyAction="http://tempuri.org/ILCK_Service/DeleteCakeResponse")]
        bool DeleteCake(int Cake_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteCake", ReplyAction="http://tempuri.org/ILCK_Service/DeleteCakeResponse")]
        System.Threading.Tasks.Task<bool> DeleteCakeAsync(int Cake_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteStore", ReplyAction="http://tempuri.org/ILCK_Service/DeleteStoreResponse")]
        bool DeleteStore(int Store_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteStore", ReplyAction="http://tempuri.org/ILCK_Service/DeleteStoreResponse")]
        System.Threading.Tasks.Task<bool> DeleteStoreAsync(int Store_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteNewOrder", ReplyAction="http://tempuri.org/ILCK_Service/DeleteNewOrderResponse")]
        bool DeleteNewOrder(int NewOrder_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DeleteNewOrder", ReplyAction="http://tempuri.org/ILCK_Service/DeleteNewOrderResponse")]
        System.Threading.Tasks.Task<bool> DeleteNewOrderAsync(int NewOrder_ID);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (DownloadFileFromServer)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DownloadFileFromServer", ReplyAction="http://tempuri.org/ILCK_Service/DownloadFileFromServerResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo DownloadFileFromServer(LCK_ClientLibrary.LCK_ServiceReference.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/DownloadFileFromServer", ReplyAction="http://tempuri.org/ILCK_Service/DownloadFileFromServerResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo> DownloadFileFromServerAsync(LCK_ClientLibrary.LCK_ServiceReference.DownloadRequest request);
        
        // CODEGEN: Generating message contract since the operation UploadFileToServer is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UploadFileToServer", ReplyAction="http://tempuri.org/ILCK_Service/UploadFileToServerResponse")]
        LCK_ClientLibrary.LCK_ServiceReference.UploadFileToServerResponse UploadFileToServer(LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILCK_Service/UploadFileToServer", ReplyAction="http://tempuri.org/ILCK_Service/UploadFileToServerResponse")]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.UploadFileToServerResponse> UploadFileToServerAsync(LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string FileName) {
            this.FileName = FileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string FileName, long Length, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileToServerResponse {
        
        public UploadFileToServerResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILCK_ServiceChannel : LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LCK_ServiceClient : System.ServiceModel.ClientBase<LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service>, LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service {
        
        public LCK_ServiceClient() {
        }
        
        public LCK_ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LCK_ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LCK_ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LCK_ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.Flavor[] GetAllFlavors() {
            return base.Channel.GetAllFlavors();
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.Flavor[]> GetAllFlavorsAsync() {
            return base.Channel.GetAllFlavorsAsync();
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.Cake[] GetAllCakes() {
            return base.Channel.GetAllCakes();
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.Cake[]> GetAllCakesAsync() {
            return base.Channel.GetAllCakesAsync();
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.Batch GetBatch(int BatchID) {
            return base.Channel.GetBatch(BatchID);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.Batch> GetBatchAsync(int BatchID) {
            return base.Channel.GetBatchAsync(BatchID);
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.Batch[] GetBatches(int StoreID, string DayNumber) {
            return base.Channel.GetBatches(StoreID, DayNumber);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.Batch[]> GetBatchesAsync(int StoreID, string DayNumber) {
            return base.Channel.GetBatchesAsync(StoreID, DayNumber);
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.Batch[] GetDailyFlavors(int StoreID, string DayNumber) {
            return base.Channel.GetDailyFlavors(StoreID, DayNumber);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.Batch[]> GetDailyFlavorsAsync(int StoreID, string DayNumber) {
            return base.Channel.GetDailyFlavorsAsync(StoreID, DayNumber);
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.StoreInfo GetStoreInfoByID(int StoreID) {
            return base.Channel.GetStoreInfoByID(StoreID);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.StoreInfo> GetStoreInfoByIDAsync(int StoreID) {
            return base.Channel.GetStoreInfoByIDAsync(StoreID);
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.StoreInfo GetStoreInfo(string Name) {
            return base.Channel.GetStoreInfo(Name);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.StoreInfo> GetStoreInfoAsync(string Name) {
            return base.Channel.GetStoreInfoAsync(Name);
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder GetSpecialOrder(int SO_ID) {
            return base.Channel.GetSpecialOrder(SO_ID);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder> GetSpecialOrderAsync(int SO_ID) {
            return base.Channel.GetSpecialOrderAsync(SO_ID);
        }
        
        public int GetLastSpecialOrderID() {
            return base.Channel.GetLastSpecialOrderID();
        }
        
        public System.Threading.Tasks.Task<int> GetLastSpecialOrderIDAsync() {
            return base.Channel.GetLastSpecialOrderIDAsync();
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder[] GetSpecialOrders(int StoreID, string DayNumber) {
            return base.Channel.GetSpecialOrders(StoreID, DayNumber);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder[]> GetSpecialOrdersAsync(int StoreID, string DayNumber) {
            return base.Channel.GetSpecialOrdersAsync(StoreID, DayNumber);
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.DayInfo GetDayInfo(int StoreID, string DayNumber) {
            return base.Channel.GetDayInfo(StoreID, DayNumber);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.DayInfo> GetDayInfoAsync(int StoreID, string DayNumber) {
            return base.Channel.GetDayInfoAsync(StoreID, DayNumber);
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.DayInfo GetDayInfoAll(string DayNumber) {
            return base.Channel.GetDayInfoAll(DayNumber);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.DayInfo> GetDayInfoAllAsync(string DayNumber) {
            return base.Channel.GetDayInfoAllAsync(DayNumber);
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.StoreInfo[] GetAllStoresInfo() {
            return base.Channel.GetAllStoresInfo();
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.StoreInfo[]> GetAllStoresInfoAsync() {
            return base.Channel.GetAllStoresInfoAsync();
        }
        
        public LCK_ClientLibrary.LCK_ServiceReference.NewOrder[] GetNewOrders() {
            return base.Channel.GetNewOrders();
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.NewOrder[]> GetNewOrdersAsync() {
            return base.Channel.GetNewOrdersAsync();
        }
        
        public bool AddBatch(LCK_ClientLibrary.LCK_ServiceReference.Batch bat) {
            return base.Channel.AddBatch(bat);
        }
        
        public System.Threading.Tasks.Task<bool> AddBatchAsync(LCK_ClientLibrary.LCK_ServiceReference.Batch bat) {
            return base.Channel.AddBatchAsync(bat);
        }
        
        public bool AddFlavor(LCK_ClientLibrary.LCK_ServiceReference.Flavor flav) {
            return base.Channel.AddFlavor(flav);
        }
        
        public System.Threading.Tasks.Task<bool> AddFlavorAsync(LCK_ClientLibrary.LCK_ServiceReference.Flavor flav) {
            return base.Channel.AddFlavorAsync(flav);
        }
        
        public bool AddCake(LCK_ClientLibrary.LCK_ServiceReference.Cake cke) {
            return base.Channel.AddCake(cke);
        }
        
        public System.Threading.Tasks.Task<bool> AddCakeAsync(LCK_ClientLibrary.LCK_ServiceReference.Cake cke) {
            return base.Channel.AddCakeAsync(cke);
        }
        
        public bool AddSpecialOrder(LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder SO) {
            return base.Channel.AddSpecialOrder(SO);
        }
        
        public System.Threading.Tasks.Task<bool> AddSpecialOrderAsync(LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder SO) {
            return base.Channel.AddSpecialOrderAsync(SO);
        }
        
        public bool AddSpecialOrderBatch(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SO_Batch batch) {
            return base.Channel.AddSpecialOrderBatch(SO_ID, batch);
        }
        
        public System.Threading.Tasks.Task<bool> AddSpecialOrderBatchAsync(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SO_Batch batch) {
            return base.Channel.AddSpecialOrderBatchAsync(SO_ID, batch);
        }
        
        public bool AddSpecialOrderCakeBatch(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.Cake_Batch cakeBatch) {
            return base.Channel.AddSpecialOrderCakeBatch(SO_ID, cakeBatch);
        }
        
        public System.Threading.Tasks.Task<bool> AddSpecialOrderCakeBatchAsync(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.Cake_Batch cakeBatch) {
            return base.Channel.AddSpecialOrderCakeBatchAsync(SO_ID, cakeBatch);
        }
        
        public bool AddStore(LCK_ClientLibrary.LCK_ServiceReference.StoreInfo Store) {
            return base.Channel.AddStore(Store);
        }
        
        public System.Threading.Tasks.Task<bool> AddStoreAsync(LCK_ClientLibrary.LCK_ServiceReference.StoreInfo Store) {
            return base.Channel.AddStoreAsync(Store);
        }
        
        public bool AddNewOrder(LCK_ClientLibrary.LCK_ServiceReference.NewOrder newOrder) {
            return base.Channel.AddNewOrder(newOrder);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewOrderAsync(LCK_ClientLibrary.LCK_ServiceReference.NewOrder newOrder) {
            return base.Channel.AddNewOrderAsync(newOrder);
        }
        
        public bool UpdateSpecialOrder(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder updatedSO) {
            return base.Channel.UpdateSpecialOrder(SO_ID, updatedSO);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSpecialOrderAsync(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SpecialOrder updatedSO) {
            return base.Channel.UpdateSpecialOrderAsync(SO_ID, updatedSO);
        }
        
        public bool UpdateSpecialOrderBatch(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SO_Batch updatedBatch) {
            return base.Channel.UpdateSpecialOrderBatch(SO_ID, updatedBatch);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSpecialOrderBatchAsync(int SO_ID, LCK_ClientLibrary.LCK_ServiceReference.SO_Batch updatedBatch) {
            return base.Channel.UpdateSpecialOrderBatchAsync(SO_ID, updatedBatch);
        }
        
        public bool UpdateBatch(int Batch_ID, LCK_ClientLibrary.LCK_ServiceReference.Batch updatedBatch) {
            return base.Channel.UpdateBatch(Batch_ID, updatedBatch);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBatchAsync(int Batch_ID, LCK_ClientLibrary.LCK_ServiceReference.Batch updatedBatch) {
            return base.Channel.UpdateBatchAsync(Batch_ID, updatedBatch);
        }
        
        public bool UpdateFlavor(int Flavor_ID, LCK_ClientLibrary.LCK_ServiceReference.Flavor updatedFlavor) {
            return base.Channel.UpdateFlavor(Flavor_ID, updatedFlavor);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFlavorAsync(int Flavor_ID, LCK_ClientLibrary.LCK_ServiceReference.Flavor updatedFlavor) {
            return base.Channel.UpdateFlavorAsync(Flavor_ID, updatedFlavor);
        }
        
        public bool UpdateCake(int Cake_ID, LCK_ClientLibrary.LCK_ServiceReference.Cake updateCake1) {
            return base.Channel.UpdateCake(Cake_ID, updateCake1);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCakeAsync(int Cake_ID, LCK_ClientLibrary.LCK_ServiceReference.Cake updateCake) {
            return base.Channel.UpdateCakeAsync(Cake_ID, updateCake);
        }
        
        public bool UpdateStore(int Store_ID, LCK_ClientLibrary.LCK_ServiceReference.StoreInfo updatedStore) {
            return base.Channel.UpdateStore(Store_ID, updatedStore);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateStoreAsync(int Store_ID, LCK_ClientLibrary.LCK_ServiceReference.StoreInfo updatedStore) {
            return base.Channel.UpdateStoreAsync(Store_ID, updatedStore);
        }
        
        public bool UpdateNewOrder(int NewOrder_ID, LCK_ClientLibrary.LCK_ServiceReference.NewOrder updatedNewOrder) {
            return base.Channel.UpdateNewOrder(NewOrder_ID, updatedNewOrder);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateNewOrderAsync(int NewOrder_ID, LCK_ClientLibrary.LCK_ServiceReference.NewOrder updatedNewOrder) {
            return base.Channel.UpdateNewOrderAsync(NewOrder_ID, updatedNewOrder);
        }
        
        public bool DeleteSpecialOrder(int SO_ID) {
            return base.Channel.DeleteSpecialOrder(SO_ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSpecialOrderAsync(int SO_ID) {
            return base.Channel.DeleteSpecialOrderAsync(SO_ID);
        }
        
        public bool DeleteAllSpecialOrders() {
            return base.Channel.DeleteAllSpecialOrders();
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAllSpecialOrdersAsync() {
            return base.Channel.DeleteAllSpecialOrdersAsync();
        }
        
        public bool DeleteSpecialOrderBatch(int Batch_ID) {
            return base.Channel.DeleteSpecialOrderBatch(Batch_ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSpecialOrderBatchAsync(int Batch_ID) {
            return base.Channel.DeleteSpecialOrderBatchAsync(Batch_ID);
        }
        
        public bool DeleteBatch(int Batch_ID) {
            return base.Channel.DeleteBatch(Batch_ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBatchAsync(int Batch_ID) {
            return base.Channel.DeleteBatchAsync(Batch_ID);
        }
        
        public bool DeleteAllBatches() {
            return base.Channel.DeleteAllBatches();
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAllBatchesAsync() {
            return base.Channel.DeleteAllBatchesAsync();
        }
        
        public bool DeleteFlavor(int Flavor_ID) {
            return base.Channel.DeleteFlavor(Flavor_ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFlavorAsync(int Flavor_ID) {
            return base.Channel.DeleteFlavorAsync(Flavor_ID);
        }
        
        public bool DeleteAllFlavors() {
            return base.Channel.DeleteAllFlavors();
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAllFlavorsAsync() {
            return base.Channel.DeleteAllFlavorsAsync();
        }
        
        public bool DeleteCake(int Cake_ID) {
            return base.Channel.DeleteCake(Cake_ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCakeAsync(int Cake_ID) {
            return base.Channel.DeleteCakeAsync(Cake_ID);
        }
        
        public bool DeleteStore(int Store_ID) {
            return base.Channel.DeleteStore(Store_ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteStoreAsync(int Store_ID) {
            return base.Channel.DeleteStoreAsync(Store_ID);
        }
        
        public bool DeleteNewOrder(int NewOrder_ID) {
            return base.Channel.DeleteNewOrder(NewOrder_ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteNewOrderAsync(int NewOrder_ID) {
            return base.Channel.DeleteNewOrderAsync(NewOrder_ID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service.DownloadFileFromServer(LCK_ClientLibrary.LCK_ServiceReference.DownloadRequest request) {
            return base.Channel.DownloadFileFromServer(request);
        }
        
        public long DownloadFileFromServer(ref string FileName, out System.IO.Stream FileByteStream) {
            LCK_ClientLibrary.LCK_ServiceReference.DownloadRequest inValue = new LCK_ClientLibrary.LCK_ServiceReference.DownloadRequest();
            inValue.FileName = FileName;
            LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo retVal = ((LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service)(this)).DownloadFileFromServer(inValue);
            FileName = retVal.FileName;
            FileByteStream = retVal.FileByteStream;
            return retVal.Length;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo> LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service.DownloadFileFromServerAsync(LCK_ClientLibrary.LCK_ServiceReference.DownloadRequest request) {
            return base.Channel.DownloadFileFromServerAsync(request);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo> DownloadFileFromServerAsync(string FileName) {
            LCK_ClientLibrary.LCK_ServiceReference.DownloadRequest inValue = new LCK_ClientLibrary.LCK_ServiceReference.DownloadRequest();
            inValue.FileName = FileName;
            return ((LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service)(this)).DownloadFileFromServerAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LCK_ClientLibrary.LCK_ServiceReference.UploadFileToServerResponse LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service.UploadFileToServer(LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo request) {
            return base.Channel.UploadFileToServer(request);
        }
        
        public void UploadFileToServer(string FileName, long Length, System.IO.Stream FileByteStream) {
            LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo inValue = new LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            LCK_ClientLibrary.LCK_ServiceReference.UploadFileToServerResponse retVal = ((LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service)(this)).UploadFileToServer(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.UploadFileToServerResponse> LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service.UploadFileToServerAsync(LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo request) {
            return base.Channel.UploadFileToServerAsync(request);
        }
        
        public System.Threading.Tasks.Task<LCK_ClientLibrary.LCK_ServiceReference.UploadFileToServerResponse> UploadFileToServerAsync(string FileName, long Length, System.IO.Stream FileByteStream) {
            LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo inValue = new LCK_ClientLibrary.LCK_ServiceReference.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            return ((LCK_ClientLibrary.LCK_ServiceReference.ILCK_Service)(this)).UploadFileToServerAsync(inValue);
        }
    }
}
